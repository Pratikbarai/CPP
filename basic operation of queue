#include<iostream>
using namespace std;

#define maxsize 5

class queue {
    int top, rear, front, arr[maxsize]; 
public:
    queue() { 
        top = -1;
        rear = -1;
        front = 0;
    }

    bool isEmpty() {
        if (top == -1 && rear == -1) 
            return true;
        else
            return false; 
    }

    bool isfull() {
        if (rear == maxsize - 1)
            return true;
        else
            return false; 
    }

    void enqueue(int k) {
        if (isfull())
            cout << "insert not possible";
        else {
            if (front == -1 && rear == -1) { 
                front = 0;
                rear = 0;
                arr[rear] = k;
            }
            else {
                rear++;
                arr[rear] = k;
                cout << "item inserted"; 
            }
        }
    }

    void dequeue() { 
        if (isEmpty())
            cout << "underflow"; 
        else {
            if (rear == top && top != -1 && rear != -1)
                cout << "delete not possible";
            else {
                cout << arr[top];
                top++;
            }
        }
    }

    void display() {
        if (isEmpty())
            cout << "underflow" << endl;
        else {
            for (int i = top; i <= rear; i++) 
                cout << arr[i] << " ";
        }
    }
};

int main() {
    queue obj;
    int choice, element, k = 1;
    while (k) {
        cout << "1 for insert" << endl << "2 for delete" << endl << "3 for display" << endl << "4 for exit" << endl;
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "enter element to be inserted\n";
            cin >> element; 
            obj.enqueue(element);
            break;
        case 2:
            obj.dequeue(); 
            break;
        case 3:
            obj.display();
            break;
        case 4:
            k = 0;
            break;
        default:
            cout << "try again";
        }
    }
    return 0; 
}
