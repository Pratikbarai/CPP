#include<iostream>
using namespace std;

#define maxsize 5

class queue {
    int top, rear, front, arr[maxsize]; // Rear and front were switched, and a missing data member 'rear' was added
public:
    queue() { // Constructor was missing
        top = -1;
        rear = -1;
        front = 0;
    }

    bool isEmpty() {
        if (top == -1 && rear == -1) // Logical condition was incorrect
            return true;
        else
            return false; // Missing semicolon
    }

    bool isfull() {
        if (rear == maxsize - 1)
            return true;
        else
            return false; // Missing semicolon
    }

    void enqueue(int k) {
        if (isfull())
            cout << "insert not possible";
        else {
            if (front == -1 && rear == -1) { // Corrected the condition
                front = 0;
                rear = 0;
                arr[rear] = k;
            }
            else {
                rear++;
                arr[rear] = k;
                cout << "item inserted"; // Missing semicolon
            }
        }
    }

    void dequeue() { // Changed 'delete' to 'dequeue' to avoid conflict with C++ keyword
        if (isEmpty())
            cout << "underflow"; // Changed 'overflow' to 'underflow'
        else {
            if (rear == top && top != -1 && rear != -1)
                cout << "delete not possible";
            else {
                cout << arr[top];
                top++;
            }
        }
    }

    void display() {
        if (isEmpty())
            cout << "underflow" << endl;
        else {
            for (int i = top; i <= rear; i++) // Changed 'i++' to 'i++'
                cout << arr[i] << " ";
        }
    }
};

int main() {
    queue obj;
    int choice, element, k = 1;
    while (k) {
        cout << "1 for insert" << endl << "2 for delete" << endl << "3 for display" << endl << "4 for exit" << endl;
        cin >> choice;
        switch (choice) {
        case 1:
            cout << "enter element to be inserted\n";
            cin >> element; // Changed '<<' to '>>'
            obj.enqueue(element);
            break;
        case 2:
            obj.dequeue(); // Changed function name from 'delete' to 'dequeue'
            break;
        case 3:
            obj.display();
            break;
        case 4:
            k = 0;
            break;
        default:
            cout << "try again";
        }
    }
    return 0; // Added a return statement at the end
}
